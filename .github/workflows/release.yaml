name: Build and Release

on:
  push:
    branches:
      - main
      - master
      # TODO remove before merge
      - ci/build_only_on_new_version

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release poetry

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          #poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Semantic Versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GH_WRITE_ACCESS }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          poetry version -s
          NO_RELEASE=$(poetry run semantic-release version --print 2>&1| grep "No release will be made")
          # If we don't find the "No release will be made" text then we know we need to release
          if [[ -z $NO_RELEASE ]]; then
            poetry run semantic-release -vv version
            VERSION=$(poetry version -s)
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          fi

      - name: Build and publish
        # Don't build if there is not a new version
        if: env.VERSION != ''
        run: |
          poetry build
          poetry publish
